(set-logic QF_BV)
(set-info:smt-lib-version 2.0)
(declare-fun fg()Bool)
(declare-fun fi()Bool)
(declare-fun tg()Bool)
(declare-fun ti()Bool)
(declare-fun eg()Bool)
(declare-fun ei()Bool)
(assert(not(= fg fi)))
(assert(not(= tg ti)))
(assert(not(= eg ei)))
(assert(= ei (and fg ti)))
(assert(= fi (or(not eg) tg)))
(assert(= ti (and ti(or fg eg))))
(check-sat)
(get-model)

(set-logic QF_LIA)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun z () Int)
(assert (or (> (+ x 1) 0) (> (+ x y) 0)))
(assert (or (< x 0) (> (+ x y) 4)))
(assert (not (> (+ x y) 0)))
(check-sat)

(set-logic QF_DT)
(declare-datatypes ((ClrList 0) (Clr 0))(
((cons (head Clr) (tail ClrList)) (nil))
((red) (green) (blue))))
(declare-fun x () Clr)
(declare-fun y () Clr)
(declare-fun z () ClrList)
(assert (= (cons x nil) (cons y z))
(assert (or (= x red) (not (= x y))))
(assert (= y green))
(check-sat)

(set-logic QF_DTLIA)
(declare-datatypes ((IntList 0))(
((cons (head Int) (tail IntList)) (nil))))
(declare-fun x () IntList)
(declare-fun y () Int)
(assert (= (+ (head x) 3) y))
(assert (= x (cons (+ y 1) nil)))
(assert (> (head x) (+ y 1)))
(check-sat)