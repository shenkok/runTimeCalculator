
; Definicion de Expresion Booleana Ṕrobabilista 
(declare-datatypes () ((ProbBool (mk-pb (p Real)))))

; restrición de 0<p<1

;Funciones asosciadas a la estructura
(define-fun trueVal ((c ProbBool)) Real
  (p c))
(define-fun falseVal ((c ProbBool)) Real
  (- 1 (p c)))
(display (mk-pb 0.6))
(simplify  (trueVal (mk-pb 0.6)))
(simplify  (falseVal (mk-pb 0.6)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Definicion de expresion aritmética determinista
(declare-datatypes () ((Arit (Var (val String))
                             (Number (n Real)) 
                             (Mult (n-m Real) (v Arit))  
                             (Sum (f-s Arit) (s-s Arit)) 
                             (Sub (f-sb Arit) (s-sb Arit)))
                       ))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display (Var "X"))
(display (Number 0.6))
(display (Mult 0.5 "X"))



;Definicion de Dado de n caras
(declare-datatypes(T) ((Dice  end
                             (add (hd Pair) (tl Dice)))
                       (Pair (mk-pair (value T) (p Real)) ) 
                       ))

(display (as end (Dice Real)))
(display (add (mk-pair 1.0 1.0) (as end (Dice Real))))
(display (add (mk-pair 0 0)(add (mk-pair 1.0 1.0) (as end (Dice Real)))))

(define-fun isEmpty ((x (Dice Real))) Int (
  match x (
    (end 0)
    ((add head tail) 1)

  )
))

(define-fun-rec countFace ((x (Dice Real))) Int (
  match x (
    (end 0)
    ((add head tail) (+ 1 (countFace tail)))

  )
))

(simplify (countFace (as end (Dice Real))))
(simplify (countFace (add (mk-pair 0.0 0.0)(add (mk-pair 1.0 1.0) (as end (Dice Real))))))

;Definicion de Programas
(declare-datatypes (T) ((Program empty 
                                (pif (guard ProbBool) (t Program) (f Program)) 
                                (assigment (r String) (l String)))))

