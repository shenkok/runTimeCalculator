
; Definicion de Expresion Booleana Ṕrobabilista
(declare-datatypes () ((ProbBool (pb (p Real)))))

; restrición de 0<p<1

;Funciones asosciadas a la estructura
(define-fun trueVal ((c ProbBool)) Real
  (p c))
(define-fun falseVal ((c ProbBool)) Real
  (- 1 (p c)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Definicion de expresion aritmética determinista
(declare-datatypes () ((Arit (Var (val String))
                             (Number (n Real)) 
                             (Mult (n-m Real) (v Arit))
                             (Sum (f-s Arit) (s-s Arit))
                             (Sub (f-sb Arit) (s-sb Arit)))
                       ))
 (define-fun-rec  aritToReal ((expArit Arit)) Real( 
  match expArit (
    ((Var x) 1.0)
    ((Number N) N)
    ((Mult k arit) (* k (aritToReal arit)))
    ((Sum arit1 arit2) (+ (aritToReal arit1) (aritToReal arit2) ))
    ((Sub arit1 arit2) (- (aritToReal arit1) (aritToReal arit2)))
    )))                 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Definicion de Dado de n caras
(declare-datatypes(T) ((Dice  end
                             (add (hd Pair) (tl Dice)))
                       (Pair (mk-pair (value T) (p Real)) ) 
                       ))

;(display (as end (Dice Real)))
;(display (add (mk-pair 1.0 1.0) (as end (Dice Real))))
;(display (add (mk-pair 0 0)(add (mk-pair 1.0 1.0) (as end (Dice Real)))))

(define-fun isEmpty ((x (Dice Real))) Int (
  match x (
    (end 0)
    ((add head tail) 1)
  )
))

(define-fun-rec countFace ((x (Dice Real))) Int (
  match x (
    (end 0)
    ((add head tail) (+ 1 (countFace tail)))

  )
))

;Definicion parcial de esperanza
(define-fun-rec  expected ((x (Dice Real))) Real (
  match x (
    (end 0)
    ((add head tail) (+ (* (p head)(value head)) (expected tail)) )
  )
))

;(simplify (countFace (as end (Dice Real))))
;(simplify (expected (add (mk-pair 10.0 0.5)(add (mk-pair 1.0 0.5) (as end (Dice Real))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;Definicion de expresiones booleanas deterministicas
(declare-datatypes () ((DExp True
                             False
                             (Eq (r-eq Arit) (l-eq Arit))  
                             (Geq (r-geq Arit) (l-geq Arit))
                             (Not (no-exp DExp))
                             (Or (r-or DExp) (l-or DExp)))
                       ))

;Definicion de RunTime
(declare-datatypes () ((RunTime (RunT (rarit Arit))
                                (Cond (c DExp))
                                (Mult (arit Arit) (dexp DExp))
                                (Ponderar (k Real) (run RunTime))
                                (Suma (s-r RunTime) (s-l RunTime))
                       )))                     

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Definicion de Programas
(declare-datatypes () ((Program empty
                                 (pif (pconf ProbBool) (c-1 Program)(c-2 Program))
                                 (assigment (r String) (l (Dice Real)))
                        )))
;Definicion de ert
(define-fun-rec  ert_f0 ((c Program)) RunTime( 
  match c (
    (empty (RunT (Number 0.0)))
    ((pif cond ct cf) (Suma (RunT (Number 1))
                      (Suma (Ponderar (trueVal cond) (ert_f0 ct))
                            (Ponderar (falseVal cond) (ert_f0 cf))     
                      )))
    ((assigment re le)(RunT (Number 1.0))) 
    )))

;RunTime hacia Expresion Aritmetica
(define-fun-rec  runTimeToArit ((f RunTime)) Arit( 
  match f (
    ((RunT exprArit) exprArit)
    ((Cond c)(Number 1.0))
    ((Mult mul1 c)(Number 1.0))
    ((Ponderar k runT) (Mult k (runTimeToArit runT)))
    ((Suma runT1 runT2) (Sum (runTimeToArit runT1)(runTimeToArit runT2)))
    )))
(define-fun programToReal ((c Program)) Real 
 (aritToReal(runTimeToArit(ert_f0 c)))
)    

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Programa de ejemplo
; if (1/2*<true> + 1/2*<false>) :
;    {succ:=true}
; else {
;      if (1/2*<true> + 1/2*<false>) :
;       {succ:=true}
;       else :
;            {succ:=false}
;     }

(simplify (pif (pb 0.5)
              (assigment "succ" (add (mk-pair 1.0 1.0) (as end (Dice Real))))
              (pif (pb 0.5)
                   (assigment "succ" (add (mk-pair 1.0 1.0) (as end (Dice Real))))
                   (assigment "succ" (add (mk-pair 0.0 1.0) (as end (Dice Real))))
              )
          )
)


(simplify (pif (pb 0.5) empty empty))

(simplify (ert_f0 (pif (pb 0.5) empty empty)))

(simplify
(programToReal (pif (pb 0.5)
              (assigment "succ" (add (mk-pair 1.0 1.0) (as end (Dice Real))))
              (pif (pb 0.5)
                   (assigment "succ" (add (mk-pair 1.0 1.0) (as end (Dice Real))))
                   (assigment "succ" (add (mk-pair 0.0 1.0) (as end (Dice Real))))
              )
          )
))


